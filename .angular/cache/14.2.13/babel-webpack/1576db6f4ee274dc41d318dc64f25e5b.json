{"ast":null,"code":"import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n  return operate((source, subscriber) => {\n    let innerSub;\n    let syncResub = false;\n    let completions$;\n    let isNotifierComplete = false;\n    let isMainComplete = false;\n\n    const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n\n    const getCompletionSubject = () => {\n      if (!completions$) {\n        completions$ = new Subject();\n        notifier(completions$).subscribe(createOperatorSubscriber(subscriber, () => {\n          if (innerSub) {\n            subscribeForRepeatWhen();\n          } else {\n            syncResub = true;\n          }\n        }, () => {\n          isNotifierComplete = true;\n          checkComplete();\n        }));\n      }\n\n      return completions$;\n    };\n\n    const subscribeForRepeatWhen = () => {\n      isMainComplete = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n        isMainComplete = true;\n        !checkComplete() && getCompletionSubject().next();\n      }));\n\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRepeatWhen();\n      }\n    };\n\n    subscribeForRepeatWhen();\n  });\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/operators/repeatWhen.js"],"names":["Subject","operate","createOperatorSubscriber","repeatWhen","notifier","source","subscriber","innerSub","syncResub","completions$","isNotifierComplete","isMainComplete","checkComplete","complete","getCompletionSubject","subscribe","subscribeForRepeatWhen","undefined","next","unsubscribe"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AACjC,SAAOH,OAAO,CAAC,CAACI,MAAD,EAASC,UAAT,KAAwB;AACnC,QAAIC,QAAJ;AACA,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIC,YAAJ;AACA,QAAIC,kBAAkB,GAAG,KAAzB;AACA,QAAIC,cAAc,GAAG,KAArB;;AACA,UAAMC,aAAa,GAAG,MAAMD,cAAc,IAAID,kBAAlB,KAAyCJ,UAAU,CAACO,QAAX,IAAuB,IAAhE,CAA5B;;AACA,UAAMC,oBAAoB,GAAG,MAAM;AAC/B,UAAI,CAACL,YAAL,EAAmB;AACfA,QAAAA,YAAY,GAAG,IAAIT,OAAJ,EAAf;AACAI,QAAAA,QAAQ,CAACK,YAAD,CAAR,CAAuBM,SAAvB,CAAiCb,wBAAwB,CAACI,UAAD,EAAa,MAAM;AACxE,cAAIC,QAAJ,EAAc;AACVS,YAAAA,sBAAsB;AACzB,WAFD,MAGK;AACDR,YAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,SAPwD,EAOtD,MAAM;AACLE,UAAAA,kBAAkB,GAAG,IAArB;AACAE,UAAAA,aAAa;AAChB,SAVwD,CAAzD;AAWH;;AACD,aAAOH,YAAP;AACH,KAhBD;;AAiBA,UAAMO,sBAAsB,GAAG,MAAM;AACjCL,MAAAA,cAAc,GAAG,KAAjB;AACAJ,MAAAA,QAAQ,GAAGF,MAAM,CAACU,SAAP,CAAiBb,wBAAwB,CAACI,UAAD,EAAaW,SAAb,EAAwB,MAAM;AAC9EN,QAAAA,cAAc,GAAG,IAAjB;AACA,SAACC,aAAa,EAAd,IAAoBE,oBAAoB,GAAGI,IAAvB,EAApB;AACH,OAHmD,CAAzC,CAAX;;AAIA,UAAIV,SAAJ,EAAe;AACXD,QAAAA,QAAQ,CAACY,WAAT;AACAZ,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,SAAS,GAAG,KAAZ;AACAQ,QAAAA,sBAAsB;AACzB;AACJ,KAZD;;AAaAA,IAAAA,sBAAsB;AACzB,GAtCa,CAAd;AAuCH","sourcesContent":["import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n    return operate((source, subscriber) => {\n        let innerSub;\n        let syncResub = false;\n        let completions$;\n        let isNotifierComplete = false;\n        let isMainComplete = false;\n        const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n        const getCompletionSubject = () => {\n            if (!completions$) {\n                completions$ = new Subject();\n                notifier(completions$).subscribe(createOperatorSubscriber(subscriber, () => {\n                    if (innerSub) {\n                        subscribeForRepeatWhen();\n                    }\n                    else {\n                        syncResub = true;\n                    }\n                }, () => {\n                    isNotifierComplete = true;\n                    checkComplete();\n                }));\n            }\n            return completions$;\n        };\n        const subscribeForRepeatWhen = () => {\n            isMainComplete = false;\n            innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n                isMainComplete = true;\n                !checkComplete() && getCompletionSubject().next();\n            }));\n            if (syncResub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                syncResub = false;\n                subscribeForRepeatWhen();\n            }\n        };\n        subscribeForRepeatWhen();\n    });\n}\n"]},"metadata":{},"sourceType":"module"}