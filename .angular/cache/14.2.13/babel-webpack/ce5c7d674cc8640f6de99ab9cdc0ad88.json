{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nexport class ConnectableObservable extends Observable {\n  constructor(source, subjectFactory) {\n    super();\n    this.source = source;\n    this.subjectFactory = subjectFactory;\n    this._subject = null;\n    this._refCount = 0;\n    this._connection = null;\n\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  _subscribe(subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  getSubject() {\n    const subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  }\n\n  _teardown() {\n    this._refCount = 0;\n    const {\n      _connection\n    } = this;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  }\n\n  connect() {\n    let connection = this._connection;\n\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(this.source.subscribe(createOperatorSubscriber(subject, undefined, () => {\n        this._teardown();\n\n        subject.complete();\n      }, err => {\n        this._teardown();\n\n        subject.error(err);\n      }, () => this._teardown())));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  }\n\n  refCount() {\n    return higherOrderRefCount()(this);\n  }\n\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js"],"names":["Observable","Subscription","refCount","higherOrderRefCount","createOperatorSubscriber","hasLift","ConnectableObservable","constructor","source","subjectFactory","_subject","_refCount","_connection","lift","_subscribe","subscriber","getSubject","subscribe","subject","isStopped","_teardown","unsubscribe","connect","connection","add","undefined","complete","err","error","closed","EMPTY"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAQ,IAAIC,mBAArB,QAAgD,uBAAhD;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAO,MAAMC,qBAAN,SAAoCN,UAApC,CAA+C;AAClDO,EAAAA,WAAW,CAACC,MAAD,EAASC,cAAT,EAAyB;AAChC;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,WAAL,GAAmB,IAAnB;;AACA,QAAIP,OAAO,CAACG,MAAD,CAAX,EAAqB;AACjB,WAAKK,IAAL,GAAYL,MAAM,CAACK,IAAnB;AACH;AACJ;;AACDC,EAAAA,UAAU,CAACC,UAAD,EAAa;AACnB,WAAO,KAAKC,UAAL,GAAkBC,SAAlB,CAA4BF,UAA5B,CAAP;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,UAAME,OAAO,GAAG,KAAKR,QAArB;;AACA,QAAI,CAACQ,OAAD,IAAYA,OAAO,CAACC,SAAxB,EAAmC;AAC/B,WAAKT,QAAL,GAAgB,KAAKD,cAAL,EAAhB;AACH;;AACD,WAAO,KAAKC,QAAZ;AACH;;AACDU,EAAAA,SAAS,GAAG;AACR,SAAKT,SAAL,GAAiB,CAAjB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkB,IAAxB;AACA,SAAKF,QAAL,GAAgB,KAAKE,WAAL,GAAmB,IAAnC;AACAA,IAAAA,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACS,WAAZ,EAA1D;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,QAAIC,UAAU,GAAG,KAAKX,WAAtB;;AACA,QAAI,CAACW,UAAL,EAAiB;AACbA,MAAAA,UAAU,GAAG,KAAKX,WAAL,GAAmB,IAAIX,YAAJ,EAAhC;AACA,YAAMiB,OAAO,GAAG,KAAKF,UAAL,EAAhB;AACAO,MAAAA,UAAU,CAACC,GAAX,CAAe,KAAKhB,MAAL,CAAYS,SAAZ,CAAsBb,wBAAwB,CAACc,OAAD,EAAUO,SAAV,EAAqB,MAAM;AACpF,aAAKL,SAAL;;AACAF,QAAAA,OAAO,CAACQ,QAAR;AACH,OAH4D,EAGzDC,GAAD,IAAS;AACR,aAAKP,SAAL;;AACAF,QAAAA,OAAO,CAACU,KAAR,CAAcD,GAAd;AACH,OAN4D,EAM1D,MAAM,KAAKP,SAAL,EANoD,CAA9C,CAAf;;AAOA,UAAIG,UAAU,CAACM,MAAf,EAAuB;AACnB,aAAKjB,WAAL,GAAmB,IAAnB;AACAW,QAAAA,UAAU,GAAGtB,YAAY,CAAC6B,KAA1B;AACH;AACJ;;AACD,WAAOP,UAAP;AACH;;AACDrB,EAAAA,QAAQ,GAAG;AACP,WAAOC,mBAAmB,GAAG,IAAH,CAA1B;AACH;;AAjDiD","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._subject = null;\n        this._refCount = 0;\n        this._connection = null;\n        if (hasLift(source)) {\n            this.lift = source.lift;\n        }\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    _teardown() {\n        this._refCount = 0;\n        const { _connection } = this;\n        this._subject = this._connection = null;\n        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            connection = this._connection = new Subscription();\n            const subject = this.getSubject();\n            connection.add(this.source.subscribe(createOperatorSubscriber(subject, undefined, () => {\n                this._teardown();\n                subject.complete();\n            }, (err) => {\n                this._teardown();\n                subject.error(err);\n            }, () => this._teardown())));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}