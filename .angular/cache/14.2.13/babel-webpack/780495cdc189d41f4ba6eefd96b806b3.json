{"ast":null,"code":"import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function combineLatest(...args) {\n  const scheduler = popScheduler(args);\n  const resultSelector = popResultSelector(args);\n  const {\n    args: observables,\n    keys\n  } = argsArgArrayOrObject(args);\n\n  if (observables.length === 0) {\n    return from([], scheduler);\n  }\n\n  const result = new Observable(combineLatestInit(observables, scheduler, keys ? values => createObject(keys, values) : identity));\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\nexport function combineLatestInit(observables, scheduler, valueTransform = identity) {\n  return subscriber => {\n    maybeSchedule(scheduler, () => {\n      const {\n        length\n      } = observables;\n      const values = new Array(length);\n      let active = length;\n      let remainingFirstValues = length;\n\n      for (let i = 0; i < length; i++) {\n        maybeSchedule(scheduler, () => {\n          const source = from(observables[i], scheduler);\n          let hasFirstValue = false;\n          source.subscribe(createOperatorSubscriber(subscriber, value => {\n            values[i] = value;\n\n            if (!hasFirstValue) {\n              hasFirstValue = true;\n              remainingFirstValues--;\n            }\n\n            if (!remainingFirstValues) {\n              subscriber.next(valueTransform(values.slice()));\n            }\n          }, () => {\n            if (! --active) {\n              subscriber.complete();\n            }\n          }));\n        }, subscriber);\n      }\n    }, subscriber);\n  };\n}\n\nfunction maybeSchedule(scheduler, execute, subscription) {\n  if (scheduler) {\n    executeSchedule(subscription, scheduler, execute);\n  } else {\n    execute();\n  }\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/observable/combineLatest.js"],"names":["Observable","argsArgArrayOrObject","from","identity","mapOneOrManyArgs","popResultSelector","popScheduler","createObject","createOperatorSubscriber","executeSchedule","combineLatest","args","scheduler","resultSelector","observables","keys","length","result","combineLatestInit","values","pipe","valueTransform","subscriber","maybeSchedule","Array","active","remainingFirstValues","i","source","hasFirstValue","subscribe","value","next","slice","complete","execute","subscription"],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function combineLatest(...args) {\n    const scheduler = popScheduler(args);\n    const resultSelector = popResultSelector(args);\n    const { args: observables, keys } = argsArgArrayOrObject(args);\n    if (observables.length === 0) {\n        return from([], scheduler);\n    }\n    const result = new Observable(combineLatestInit(observables, scheduler, keys\n        ?\n            (values) => createObject(keys, values)\n        :\n            identity));\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\nexport function combineLatestInit(observables, scheduler, valueTransform = identity) {\n    return (subscriber) => {\n        maybeSchedule(scheduler, () => {\n            const { length } = observables;\n            const values = new Array(length);\n            let active = length;\n            let remainingFirstValues = length;\n            for (let i = 0; i < length; i++) {\n                maybeSchedule(scheduler, () => {\n                    const source = from(observables[i], scheduler);\n                    let hasFirstValue = false;\n                    source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                        values[i] = value;\n                        if (!hasFirstValue) {\n                            hasFirstValue = true;\n                            remainingFirstValues--;\n                        }\n                        if (!remainingFirstValues) {\n                            subscriber.next(valueTransform(values.slice()));\n                        }\n                    }, () => {\n                        if (!--active) {\n                            subscriber.complete();\n                        }\n                    }));\n                }, subscriber);\n            }\n        }, subscriber);\n    };\n}\nfunction maybeSchedule(scheduler, execute, subscription) {\n    if (scheduler) {\n        executeSchedule(subscription, scheduler, execute);\n    }\n    else {\n        execute();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}