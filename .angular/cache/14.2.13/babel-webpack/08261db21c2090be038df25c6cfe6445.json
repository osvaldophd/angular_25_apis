{"ast":null,"code":"import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n  const resultSelector = popResultSelector(args);\n  const {\n    args: sources,\n    keys\n  } = argsArgArrayOrObject(args);\n  const result = new Observable(subscriber => {\n    const {\n      length\n    } = sources;\n\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n\n    const values = new Array(length);\n    let remainingCompletions = length;\n    let remainingEmissions = length;\n\n    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      let hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, value => {\n        if (!hasValue) {\n          hasValue = true;\n          remainingEmissions--;\n        }\n\n        values[sourceIndex] = value;\n      }, () => remainingCompletions--, undefined, () => {\n        if (!remainingCompletions || !hasValue) {\n          if (!remainingEmissions) {\n            subscriber.next(keys ? createObject(keys, values) : values);\n          }\n\n          subscriber.complete();\n        }\n      }));\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/observable/forkJoin.js"],"names":["Observable","argsArgArrayOrObject","innerFrom","popResultSelector","createOperatorSubscriber","mapOneOrManyArgs","createObject","forkJoin","args","resultSelector","sources","keys","result","subscriber","length","complete","values","Array","remainingCompletions","remainingEmissions","sourceIndex","hasValue","subscribe","value","undefined","next","pipe"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAO,SAASC,QAAT,CAAkB,GAAGC,IAArB,EAA2B;AAC9B,QAAMC,cAAc,GAAGN,iBAAiB,CAACK,IAAD,CAAxC;AACA,QAAM;AAAEA,IAAAA,IAAI,EAAEE,OAAR;AAAiBC,IAAAA;AAAjB,MAA0BV,oBAAoB,CAACO,IAAD,CAApD;AACA,QAAMI,MAAM,GAAG,IAAIZ,UAAJ,CAAgBa,UAAD,IAAgB;AAC1C,UAAM;AAAEC,MAAAA;AAAF,QAAaJ,OAAnB;;AACA,QAAI,CAACI,MAAL,EAAa;AACTD,MAAAA,UAAU,CAACE,QAAX;AACA;AACH;;AACD,UAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,MAAV,CAAf;AACA,QAAII,oBAAoB,GAAGJ,MAA3B;AACA,QAAIK,kBAAkB,GAAGL,MAAzB;;AACA,SAAK,IAAIM,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGN,MAAxC,EAAgDM,WAAW,EAA3D,EAA+D;AAC3D,UAAIC,QAAQ,GAAG,KAAf;AACAnB,MAAAA,SAAS,CAACQ,OAAO,CAACU,WAAD,CAAR,CAAT,CAAgCE,SAAhC,CAA0ClB,wBAAwB,CAACS,UAAD,EAAcU,KAAD,IAAW;AACtF,YAAI,CAACF,QAAL,EAAe;AACXA,UAAAA,QAAQ,GAAG,IAAX;AACAF,UAAAA,kBAAkB;AACrB;;AACDH,QAAAA,MAAM,CAACI,WAAD,CAAN,GAAsBG,KAAtB;AACH,OANiE,EAM/D,MAAML,oBAAoB,EANqC,EAMjCM,SANiC,EAMtB,MAAM;AAC9C,YAAI,CAACN,oBAAD,IAAyB,CAACG,QAA9B,EAAwC;AACpC,cAAI,CAACF,kBAAL,EAAyB;AACrBN,YAAAA,UAAU,CAACY,IAAX,CAAgBd,IAAI,GAAGL,YAAY,CAACK,IAAD,EAAOK,MAAP,CAAf,GAAgCA,MAApD;AACH;;AACDH,UAAAA,UAAU,CAACE,QAAX;AACH;AACJ,OAbiE,CAAlE;AAcH;AACJ,GA1Bc,CAAf;AA2BA,SAAON,cAAc,GAAGG,MAAM,CAACc,IAAP,CAAYrB,gBAAgB,CAACI,cAAD,CAA5B,CAAH,GAAmDG,MAAxE;AACH","sourcesContent":["import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n"]},"metadata":{},"sourceType":"module"}