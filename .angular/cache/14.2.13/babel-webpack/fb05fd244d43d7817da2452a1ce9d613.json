{"ast":null,"code":"import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n  constructor() {\n    super();\n    this.closed = false;\n    this.currentObservers = null;\n    this.observers = [];\n    this.isStopped = false;\n    this.hasError = false;\n    this.thrownError = null;\n  }\n\n  lift(operator) {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  }\n\n  _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value) {\n    errorContext(() => {\n      this._throwIfClosed();\n\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err) {\n    errorContext(() => {\n      this._throwIfClosed();\n\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const {\n          observers\n        } = this;\n\n        while (observers.length) {\n          observers.shift().error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const {\n          observers\n        } = this;\n\n        while (observers.length) {\n          observers.shift().complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null;\n  }\n\n  get observed() {\n    var _a;\n\n    return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n  }\n\n  _trySubscribe(subscriber) {\n    this._throwIfClosed();\n\n    return super._trySubscribe(subscriber);\n  }\n\n  _subscribe(subscriber) {\n    this._throwIfClosed();\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return this._innerSubscribe(subscriber);\n  }\n\n  _innerSubscribe(subscriber) {\n    const {\n      hasError,\n      isStopped,\n      observers\n    } = this;\n\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  _checkFinalizedStatuses(subscriber) {\n    const {\n      hasError,\n      thrownError,\n      isStopped\n    } = this;\n\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  asObservable() {\n    const observable = new Observable();\n    observable.source = this;\n    return observable;\n  }\n\n}\n\nSubject.create = (destination, source) => {\n  return new AnonymousSubject(destination, source);\n};\n\nexport class AnonymousSubject extends Subject {\n  constructor(destination, source) {\n    super();\n    this.destination = destination;\n    this.source = source;\n  }\n\n  next(value) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  }\n\n  error(err) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  }\n\n  complete() {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n\n  _subscribe(subscriber) {\n    var _a, _b;\n\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n  }\n\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/Subject.js"],"names":["Observable","Subscription","EMPTY_SUBSCRIPTION","ObjectUnsubscribedError","arrRemove","errorContext","Subject","constructor","closed","currentObservers","observers","isStopped","hasError","thrownError","lift","operator","subject","AnonymousSubject","_throwIfClosed","next","value","Array","from","observer","error","err","length","shift","complete","unsubscribe","observed","_a","_trySubscribe","subscriber","_subscribe","_checkFinalizedStatuses","_innerSubscribe","push","asObservable","observable","source","create","destination","_b","call","subscribe"],"mappings":"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","sourcesContent":["import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}