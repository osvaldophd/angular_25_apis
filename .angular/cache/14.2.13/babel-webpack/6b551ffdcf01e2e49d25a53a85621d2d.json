{"ast":null,"code":"import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nexport class Observable {\n  constructor(subscribe) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  lift(operator) {\n    const observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observerOrNext, error, complete) {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n    errorContext(() => {\n      const {\n        operator,\n        source\n      } = this;\n      subscriber.add(operator ? operator.call(subscriber, source) : source ? this._subscribe(subscriber) : this._trySubscribe(subscriber));\n    });\n    return subscriber;\n  }\n\n  _trySubscribe(sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.error(err);\n    }\n  }\n\n  forEach(next, promiseCtor) {\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor((resolve, reject) => {\n      const subscriber = new SafeSubscriber({\n        next: value => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n      this.subscribe(subscriber);\n    });\n  }\n\n  _subscribe(subscriber) {\n    var _a;\n\n    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n  }\n\n  [Symbol_observable]() {\n    return this;\n  }\n\n  pipe(...operations) {\n    return pipeFromArray(operations)(this);\n  }\n\n  toPromise(promiseCtor) {\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor((resolve, reject) => {\n      let value;\n      this.subscribe(x => value = x, err => reject(err), () => resolve(value));\n    });\n  }\n\n}\n\nObservable.create = subscribe => {\n  return new Observable(subscribe);\n};\n\nfunction getPromiseCtor(promiseCtor) {\n  var _a;\n\n  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\n\nfunction isObserver(value) {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber(value) {\n  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/Observable.js"],"names":["SafeSubscriber","Subscriber","isSubscription","observable","Symbol_observable","pipeFromArray","config","isFunction","errorContext","Observable","constructor","subscribe","_subscribe","lift","operator","source","observerOrNext","error","complete","subscriber","isSubscriber","add","call","_trySubscribe","sink","err","forEach","next","promiseCtor","getPromiseCtor","resolve","reject","value","unsubscribe","_a","pipe","operations","toPromise","x","create","Promise","isObserver"],"mappings":"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","sourcesContent":["import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nexport class Observable {\n    constructor(subscribe) {\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n        errorContext(() => {\n            const { operator, source } = this;\n            subscriber.add(operator\n                ?\n                    operator.call(subscriber, source)\n                : source\n                    ?\n                        this._subscribe(subscriber)\n                    :\n                        this._trySubscribe(subscriber));\n        });\n        return subscriber;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.error(err);\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            const subscriber = new SafeSubscriber({\n                next: (value) => {\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscriber.unsubscribe();\n                    }\n                },\n                error: reject,\n                complete: resolve,\n            });\n            this.subscribe(subscriber);\n        });\n    }\n    _subscribe(subscriber) {\n        var _a;\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => (value = x), (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    var _a;\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\nfunction isSubscriber(value) {\n    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n"]},"metadata":{},"sourceType":"module"}