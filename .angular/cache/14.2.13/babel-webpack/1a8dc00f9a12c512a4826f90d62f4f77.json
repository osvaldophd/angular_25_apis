{"ast":null,"code":"import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function skipLast(skipCount) {\n  return skipCount <= 0 ? identity : operate((source, subscriber) => {\n    let ring = new Array(skipCount);\n    let seen = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      const valueIndex = seen++;\n\n      if (valueIndex < skipCount) {\n        ring[valueIndex] = value;\n      } else {\n        const index = valueIndex % skipCount;\n        const oldValue = ring[index];\n        ring[index] = value;\n        subscriber.next(oldValue);\n      }\n    }));\n    return () => {\n      ring = null;\n    };\n  });\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/operators/skipLast.js"],"names":["identity","operate","createOperatorSubscriber","skipLast","skipCount","source","subscriber","ring","Array","seen","subscribe","value","valueIndex","index","oldValue","next"],"mappings":"AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAChC,SAAOA,SAAS,IAAI,CAAb,GAECJ,QAFD,GAGDC,OAAO,CAAC,CAACI,MAAD,EAASC,UAAT,KAAwB;AAC9B,QAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,SAAV,CAAX;AACA,QAAIK,IAAI,GAAG,CAAX;AACAJ,IAAAA,MAAM,CAACK,SAAP,CAAiBR,wBAAwB,CAACI,UAAD,EAAcK,KAAD,IAAW;AAC7D,YAAMC,UAAU,GAAGH,IAAI,EAAvB;;AACA,UAAIG,UAAU,GAAGR,SAAjB,EAA4B;AACxBG,QAAAA,IAAI,CAACK,UAAD,CAAJ,GAAmBD,KAAnB;AACH,OAFD,MAGK;AACD,cAAME,KAAK,GAAGD,UAAU,GAAGR,SAA3B;AACA,cAAMU,QAAQ,GAAGP,IAAI,CAACM,KAAD,CAArB;AACAN,QAAAA,IAAI,CAACM,KAAD,CAAJ,GAAcF,KAAd;AACAL,QAAAA,UAAU,CAACS,IAAX,CAAgBD,QAAhB;AACH;AACJ,KAXwC,CAAzC;AAYA,WAAO,MAAM;AACTP,MAAAA,IAAI,GAAG,IAAP;AACH,KAFD;AAGH,GAlBQ,CAHb;AAsBH","sourcesContent":["import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function skipLast(skipCount) {\n    return skipCount <= 0\n        ?\n            identity\n        : operate((source, subscriber) => {\n            let ring = new Array(skipCount);\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                const valueIndex = seen++;\n                if (valueIndex < skipCount) {\n                    ring[valueIndex] = value;\n                }\n                else {\n                    const index = valueIndex % skipCount;\n                    const oldValue = ring[index];\n                    ring[index] = value;\n                    subscriber.next(oldValue);\n                }\n            }));\n            return () => {\n                ring = null;\n            };\n        });\n}\n"]},"metadata":{},"sourceType":"module"}