{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount = Infinity) {\n  let config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  const {\n    count = Infinity,\n    delay,\n    resetOnSuccess = false\n  } = config;\n  return count <= 0 ? identity : operate((source, subscriber) => {\n    let soFar = 0;\n    let innerSub;\n\n    const subscribeForRetry = () => {\n      let syncUnsub = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, value => {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, err => {\n        if (soFar++ < count) {\n          const resub = () => {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n\n          if (delay != null) {\n            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n              notifierSubscriber.unsubscribe();\n              resub();\n            }, () => {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber);\n          } else {\n            resub();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/operators/retry.js"],"names":["operate","createOperatorSubscriber","identity","timer","innerFrom","retry","configOrCount","Infinity","config","count","delay","resetOnSuccess","source","subscriber","soFar","innerSub","subscribeForRetry","syncUnsub","subscribe","value","next","undefined","err","resub","unsubscribe","notifier","notifierSubscriber","complete","error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAO,SAASC,KAAT,CAAeC,aAAa,GAAGC,QAA/B,EAAyC;AAC5C,MAAIC,MAAJ;;AACA,MAAIF,aAAa,IAAI,OAAOA,aAAP,KAAyB,QAA9C,EAAwD;AACpDE,IAAAA,MAAM,GAAGF,aAAT;AACH,GAFD,MAGK;AACDE,IAAAA,MAAM,GAAG;AACLC,MAAAA,KAAK,EAAEH;AADF,KAAT;AAGH;;AACD,QAAM;AAAEG,IAAAA,KAAK,GAAGF,QAAV;AAAoBG,IAAAA,KAApB;AAA2CC,IAAAA,cAAc,GAAG;AAA5D,MAAsEH,MAA5E;AACA,SAAOC,KAAK,IAAI,CAAT,GACDP,QADC,GAEDF,OAAO,CAAC,CAACY,MAAD,EAASC,UAAT,KAAwB;AAC9B,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,QAAJ;;AACA,UAAMC,iBAAiB,GAAG,MAAM;AAC5B,UAAIC,SAAS,GAAG,KAAhB;AACAF,MAAAA,QAAQ,GAAGH,MAAM,CAACM,SAAP,CAAiBjB,wBAAwB,CAACY,UAAD,EAAcM,KAAD,IAAW;AACxE,YAAIR,cAAJ,EAAoB;AAChBG,UAAAA,KAAK,GAAG,CAAR;AACH;;AACDD,QAAAA,UAAU,CAACO,IAAX,CAAgBD,KAAhB;AACH,OALmD,EAKjDE,SALiD,EAKrCC,GAAD,IAAS;AACnB,YAAIR,KAAK,KAAKL,KAAd,EAAqB;AACjB,gBAAMc,KAAK,GAAG,MAAM;AAChB,gBAAIR,QAAJ,EAAc;AACVA,cAAAA,QAAQ,CAACS,WAAT;AACAT,cAAAA,QAAQ,GAAG,IAAX;AACAC,cAAAA,iBAAiB;AACpB,aAJD,MAKK;AACDC,cAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,WATD;;AAUA,cAAIP,KAAK,IAAI,IAAb,EAAmB;AACf,kBAAMe,QAAQ,GAAG,OAAOf,KAAP,KAAiB,QAAjB,GAA4BP,KAAK,CAACO,KAAD,CAAjC,GAA2CN,SAAS,CAACM,KAAK,CAACY,GAAD,EAAMR,KAAN,CAAN,CAArE;AACA,kBAAMY,kBAAkB,GAAGzB,wBAAwB,CAACY,UAAD,EAAa,MAAM;AAClEa,cAAAA,kBAAkB,CAACF,WAAnB;AACAD,cAAAA,KAAK;AACR,aAHkD,EAGhD,MAAM;AACLV,cAAAA,UAAU,CAACc,QAAX;AACH,aALkD,CAAnD;AAMAF,YAAAA,QAAQ,CAACP,SAAT,CAAmBQ,kBAAnB;AACH,WATD,MAUK;AACDH,YAAAA,KAAK;AACR;AACJ,SAxBD,MAyBK;AACDV,UAAAA,UAAU,CAACe,KAAX,CAAiBN,GAAjB;AACH;AACJ,OAlCmD,CAAzC,CAAX;;AAmCA,UAAIL,SAAJ,EAAe;AACXF,QAAAA,QAAQ,CAACS,WAAT;AACAT,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,iBAAiB;AACpB;AACJ,KA1CD;;AA2CAA,IAAAA,iBAAiB;AACpB,GA/CQ,CAFb;AAkDH","sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount = Infinity) {\n    let config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\n    return count <= 0\n        ? identity\n        : operate((source, subscriber) => {\n            let soFar = 0;\n            let innerSub;\n            const subscribeForRetry = () => {\n                let syncUnsub = false;\n                innerSub = source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, (err) => {\n                    if (soFar++ < count) {\n                        const resub = () => {\n                            if (innerSub) {\n                                innerSub.unsubscribe();\n                                innerSub = null;\n                                subscribeForRetry();\n                            }\n                            else {\n                                syncUnsub = true;\n                            }\n                        };\n                        if (delay != null) {\n                            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n                                notifierSubscriber.unsubscribe();\n                                resub();\n                            }, () => {\n                                subscriber.complete();\n                            });\n                            notifier.subscribe(notifierSubscriber);\n                        }\n                        else {\n                            resub();\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n"]},"metadata":{},"sourceType":"module"}