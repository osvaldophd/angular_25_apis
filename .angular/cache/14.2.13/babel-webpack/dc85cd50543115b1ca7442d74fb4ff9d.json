{"ast":null,"code":"import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  flush(action) {\n    this._active = true;\n    const flushId = this._scheduled;\n    this._scheduled = undefined;\n    const {\n      actions\n    } = this;\n    let error;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js"],"names":["AsyncScheduler","AnimationFrameScheduler","flush","action","_active","flushId","_scheduled","undefined","actions","error","shift","execute","state","delay","id","unsubscribe"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAO,MAAMC,uBAAN,SAAsCD,cAAtC,CAAqD;AACxDE,EAAAA,KAAK,CAACC,MAAD,EAAS;AACV,SAAKC,OAAL,GAAe,IAAf;AACA,UAAMC,OAAO,GAAG,KAAKC,UAArB;AACA,SAAKA,UAAL,GAAkBC,SAAlB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAc,IAApB;AACA,QAAIC,KAAJ;AACAN,IAAAA,MAAM,GAAGA,MAAM,IAAIK,OAAO,CAACE,KAAR,EAAnB;;AACA,OAAG;AACC,UAAKD,KAAK,GAAGN,MAAM,CAACQ,OAAP,CAAeR,MAAM,CAACS,KAAtB,EAA6BT,MAAM,CAACU,KAApC,CAAb,EAA0D;AACtD;AACH;AACJ,KAJD,QAIS,CAACV,MAAM,GAAGK,OAAO,CAAC,CAAD,CAAjB,KAAyBL,MAAM,CAACW,EAAP,KAAcT,OAAvC,IAAkDG,OAAO,CAACE,KAAR,EAJ3D;;AAKA,SAAKN,OAAL,GAAe,KAAf;;AACA,QAAIK,KAAJ,EAAW;AACP,aAAO,CAACN,MAAM,GAAGK,OAAO,CAAC,CAAD,CAAjB,KAAyBL,MAAM,CAACW,EAAP,KAAcT,OAAvC,IAAkDG,OAAO,CAACE,KAAR,EAAzD,EAA0E;AACtEP,QAAAA,MAAM,CAACY,WAAP;AACH;;AACD,YAAMN,KAAN;AACH;AACJ;;AApBuD","sourcesContent":["import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}