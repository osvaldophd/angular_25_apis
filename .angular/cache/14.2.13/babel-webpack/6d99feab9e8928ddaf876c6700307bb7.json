{"ast":null,"code":"import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip(...args) {\n  const resultSelector = popResultSelector(args);\n  const sources = argsOrArgArray(args);\n  return sources.length ? new Observable(subscriber => {\n    let buffers = sources.map(() => []);\n    let completed = sources.map(() => false);\n    subscriber.add(() => {\n      buffers = completed = null;\n    });\n\n    for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, value => {\n        buffers[sourceIndex].push(value);\n\n        if (buffers.every(buffer => buffer.length)) {\n          const result = buffers.map(buffer => buffer.shift());\n          subscriber.next(resultSelector ? resultSelector(...result) : result);\n\n          if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n            subscriber.complete();\n          }\n        }\n      }, () => {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    }\n\n    return () => {\n      buffers = completed = null;\n    };\n  }) : EMPTY;\n}","map":{"version":3,"sources":["/Volumes/arquivo-osvaldo/WWW/treinamento/angular_25_apis/node_modules/rxjs/dist/esm/internal/observable/zip.js"],"names":["Observable","innerFrom","argsOrArgArray","EMPTY","createOperatorSubscriber","popResultSelector","zip","args","resultSelector","sources","length","subscriber","buffers","map","completed","add","sourceIndex","closed","subscribe","value","push","every","buffer","result","shift","next","some","i","complete"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,OAAO,SAASC,GAAT,CAAa,GAAGC,IAAhB,EAAsB;AACzB,QAAMC,cAAc,GAAGH,iBAAiB,CAACE,IAAD,CAAxC;AACA,QAAME,OAAO,GAAGP,cAAc,CAACK,IAAD,CAA9B;AACA,SAAOE,OAAO,CAACC,MAAR,GACD,IAAIV,UAAJ,CAAgBW,UAAD,IAAgB;AAC7B,QAAIC,OAAO,GAAGH,OAAO,CAACI,GAAR,CAAY,MAAM,EAAlB,CAAd;AACA,QAAIC,SAAS,GAAGL,OAAO,CAACI,GAAR,CAAY,MAAM,KAAlB,CAAhB;AACAF,IAAAA,UAAU,CAACI,GAAX,CAAe,MAAM;AACjBH,MAAAA,OAAO,GAAGE,SAAS,GAAG,IAAtB;AACH,KAFD;;AAGA,SAAK,IAAIE,WAAW,GAAG,CAAvB,EAA0B,CAACL,UAAU,CAACM,MAAZ,IAAsBD,WAAW,GAAGP,OAAO,CAACC,MAAtE,EAA8EM,WAAW,EAAzF,EAA6F;AACzFf,MAAAA,SAAS,CAACQ,OAAO,CAACO,WAAD,CAAR,CAAT,CAAgCE,SAAhC,CAA0Cd,wBAAwB,CAACO,UAAD,EAAcQ,KAAD,IAAW;AACtFP,QAAAA,OAAO,CAACI,WAAD,CAAP,CAAqBI,IAArB,CAA0BD,KAA1B;;AACA,YAAIP,OAAO,CAACS,KAAR,CAAeC,MAAD,IAAYA,MAAM,CAACZ,MAAjC,CAAJ,EAA8C;AAC1C,gBAAMa,MAAM,GAAGX,OAAO,CAACC,GAAR,CAAaS,MAAD,IAAYA,MAAM,CAACE,KAAP,EAAxB,CAAf;AACAb,UAAAA,UAAU,CAACc,IAAX,CAAgBjB,cAAc,GAAGA,cAAc,CAAC,GAAGe,MAAJ,CAAjB,GAA+BA,MAA7D;;AACA,cAAIX,OAAO,CAACc,IAAR,CAAa,CAACJ,MAAD,EAASK,CAAT,KAAe,CAACL,MAAM,CAACZ,MAAR,IAAkBI,SAAS,CAACa,CAAD,CAAvD,CAAJ,EAAiE;AAC7DhB,YAAAA,UAAU,CAACiB,QAAX;AACH;AACJ;AACJ,OATiE,EAS/D,MAAM;AACLd,QAAAA,SAAS,CAACE,WAAD,CAAT,GAAyB,IAAzB;AACA,SAACJ,OAAO,CAACI,WAAD,CAAP,CAAqBN,MAAtB,IAAgCC,UAAU,CAACiB,QAAX,EAAhC;AACH,OAZiE,CAAlE;AAaH;;AACD,WAAO,MAAM;AACThB,MAAAA,OAAO,GAAGE,SAAS,GAAG,IAAtB;AACH,KAFD;AAGH,GAxBC,CADC,GA0BDX,KA1BN;AA2BH","sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip(...args) {\n    const resultSelector = popResultSelector(args);\n    const sources = argsOrArgArray(args);\n    return sources.length\n        ? new Observable((subscriber) => {\n            let buffers = sources.map(() => []);\n            let completed = sources.map(() => false);\n            subscriber.add(() => {\n                buffers = completed = null;\n            });\n            for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n                innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                    buffers[sourceIndex].push(value);\n                    if (buffers.every((buffer) => buffer.length)) {\n                        const result = buffers.map((buffer) => buffer.shift());\n                        subscriber.next(resultSelector ? resultSelector(...result) : result);\n                        if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n                            subscriber.complete();\n                        }\n                    }\n                }, () => {\n                    completed[sourceIndex] = true;\n                    !buffers[sourceIndex].length && subscriber.complete();\n                }));\n            }\n            return () => {\n                buffers = completed = null;\n            };\n        })\n        : EMPTY;\n}\n"]},"metadata":{},"sourceType":"module"}